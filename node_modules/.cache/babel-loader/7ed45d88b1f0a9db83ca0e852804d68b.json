{"ast":null,"code":"var _jsxFileName = \"/home/jose/pruebas-tecnicas/onemind-test/src/home/card/card.container.js\",\n    _s = $RefreshSig$();\n\nimport CardView from \"./card.view\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Card = ({\n  data,\n  animal\n}) => {\n  _s();\n\n  const [showMore, setShowMore] = useState(false);\n  const [usersUpdated, setUsersUpdated] = useState(false);\n  const [users, setUsers] = useState(false);\n  let usersFiltered = [];\n\n  const filterByAnimal = (users, animal) => {\n    users.map(user => {\n      if (user.animals.includes(animal) && user.isActive) {\n        usersFiltered.push(user);\n      }\n    });\n  };\n\n  const showMoreClick = () => setShowMore(!showMore);\n\n  const removeUser = index => {\n    debugger;\n    usersFiltered.splice(index, 1);\n    debugger;\n    const newUsers = usersFiltered;\n    buildUsers(newUsers);\n    setUsersUpdated(true);\n  };\n\n  const sortByPoints = users => users.sort((a, b) => a.points > b.points ? -1 : 1);\n\n  const buildUsers = users => {\n    filterByAnimal(users, animal);\n    sortByPoints(users);\n  };\n\n  if (users.length && animal) {\n    buildUsers(users);\n  }\n\n  useEffect(() => {\n    if (users.length && animal) {\n      debugger;\n      buildUsers(usersFiltered);\n      setUsersUpdated(false);\n    }\n  }, [usersUpdated]);\n  return usersFiltered.length ? /*#__PURE__*/_jsxDEV(CardView, {\n    users: usersFiltered,\n    animal: animal,\n    showMore: showMore,\n    removeUser: removeUser,\n    showMoreClick: showMoreClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Card, \"w9YY7lUtnsUyyPjAR2gIZ5Hk04k=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/home/jose/pruebas-tecnicas/onemind-test/src/home/card/card.container.js"],"names":["CardView","useState","useEffect","Card","data","animal","showMore","setShowMore","usersUpdated","setUsersUpdated","users","setUsers","usersFiltered","filterByAnimal","map","user","animals","includes","isActive","push","showMoreClick","removeUser","index","splice","newUsers","buildUsers","sortByPoints","sort","a","b","points","length"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAsB;AAAA;;AAEjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,KAAD,CAAlC;AAGA,MAAIW,aAAa,GAAG,EAApB;;AAEA,QAAMC,cAAc,GAAG,CAACH,KAAD,EAAQL,MAAR,KAAmB;AACxCK,IAAAA,KAAK,CAACI,GAAN,CAAUC,IAAI,IAAI;AAChB,UAAIA,IAAI,CAACC,OAAL,CAAaC,QAAb,CAAsBZ,MAAtB,KAAiCU,IAAI,CAACG,QAA1C,EAAoD;AAClDN,QAAAA,aAAa,CAACO,IAAd,CAAmBJ,IAAnB;AACD;AACF,KAJD;AAKD,GAND;;AAQA,QAAMK,aAAa,GAAG,MAAMb,WAAW,CAAC,CAACD,QAAF,CAAvC;;AAEA,QAAMe,UAAU,GAAIC,KAAD,IAAW;AAC5B;AACAV,IAAAA,aAAa,CAACW,MAAd,CAAqBD,KAArB,EAA4B,CAA5B;AACA;AACA,UAAME,QAAQ,GAAGZ,aAAjB;AACAa,IAAAA,UAAU,CAACD,QAAD,CAAV;AACAf,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAPD;;AASA,QAAMiB,YAAY,GAAIhB,KAAD,IAAWA,KAAK,CAACiB,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,MAAF,GAAWD,CAAC,CAACC,MAAd,GAAwB,CAAC,CAAzB,GAA6B,CAAlD,CAAhC;;AAEA,QAAML,UAAU,GAAIf,KAAD,IAAW;AAC5BG,IAAAA,cAAc,CAACH,KAAD,EAAQL,MAAR,CAAd;AACAqB,IAAAA,YAAY,CAAChB,KAAD,CAAZ;AACD,GAHD;;AAKA,MAAIA,KAAK,CAACqB,MAAN,IAAgB1B,MAApB,EAA4B;AAC1BoB,IAAAA,UAAU,CAACf,KAAD,CAAV;AACD;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,KAAK,CAACqB,MAAN,IAAgB1B,MAApB,EAA4B;AAC1B;AACAoB,MAAAA,UAAU,CAACb,aAAD,CAAV;AACAH,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GANQ,EAMN,CAACD,YAAD,CANM,CAAT;AAQA,SAAOI,aAAa,CAACmB,MAAd,gBACL,QAAC,QAAD;AACE,IAAA,KAAK,EAAEnB,aADT;AAEE,IAAA,MAAM,EAAEP,MAFV;AAGE,IAAA,QAAQ,EAAEC,QAHZ;AAIE,IAAA,UAAU,EAAEe,UAJd;AAKE,IAAA,aAAa,EAAED;AALjB;AAAA;AAAA;AAAA;AAAA,UADK,gBASL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF;AAUD,CAzDD;;GAAMjB,I;;KAAAA,I;AA2DN,eAAeA,IAAf","sourcesContent":["import CardView from \"./card.view\";\nimport { useState, useEffect } from \"react\";\n\nconst Card = ({ data, animal }) => {\n\n  const [showMore, setShowMore] = useState(false);\n  const [usersUpdated, setUsersUpdated] = useState(false);\n  const [users, setUsers] = useState(false);\n\n\n  let usersFiltered = [];\n\n  const filterByAnimal = (users, animal) => {\n    users.map(user => {\n      if (user.animals.includes(animal) && user.isActive) {\n        usersFiltered.push(user);\n      }\n    });\n  }\n\n  const showMoreClick = () => setShowMore(!showMore);\n\n  const removeUser = (index) => {\n    debugger;\n    usersFiltered.splice(index, 1)\n    debugger;\n    const newUsers = usersFiltered;\n    buildUsers(newUsers);\n    setUsersUpdated(true);\n  };\n\n  const sortByPoints = (users) => users.sort((a, b) => (a.points > b.points) ? -1 : 1);\n\n  const buildUsers = (users) => {\n    filterByAnimal(users, animal);\n    sortByPoints(users);\n  }\n\n  if (users.length && animal) {\n    buildUsers(users);\n  }\n\n  useEffect(() => {\n    if (users.length && animal) {\n      debugger;\n      buildUsers(usersFiltered);\n      setUsersUpdated(false);\n    }\n  }, [usersUpdated]);\n  \n  return usersFiltered.length ? \n    <CardView \n      users={usersFiltered} \n      animal={animal}\n      showMore={showMore}\n      removeUser={removeUser}\n      showMoreClick={showMoreClick}\n    /> \n      : \n    <div>loading...</div>;\n}\n\nexport default Card;"]},"metadata":{},"sourceType":"module"}